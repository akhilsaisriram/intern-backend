const express = require('express');
const router = express.Router();
const Transaction=require('../models/Transaction')
const User=require('../models/users');
const Book = require('../models/Book');

// API: List of people who have issued a book and who currently has it issued
router.get("/book/:bookName", async (req, res) => {
  const { bookName } = req.params;

  try {
    const allTransactions = await Transaction.find({ bookName });
    const totalCount = allTransactions.length;

    const currentTransaction = await Transaction.findOne({ bookName, status: "issued" });

    let currentStatus;
    if (currentTransaction) {
      const user = await User.findById(currentTransaction.userId);
      currentStatus = {
        status: "Currently issued",
        user: user ? user.name : "User not found",
      };
    } else {
      currentStatus = {
        status: "Not issued at the moment",
      };
    }

    res.status(200).json({
      totalIssuedCount: totalCount,
      currentStatus,
      allIssuers: allTransactions.map(t => ({ userId: t.userId, issueDate: t.issueDate })),
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API: Total rent generated by a book
router.get("/rent/:bookName", async (req, res) => {
  const { bookName } = req.params;

  try {
    const transactions = await Transaction.find({ bookName, status: "returned" });
    const totalRent = transactions.reduce((total, transaction) => total + transaction.rent, 0);

    res.status(200).json({
      bookName,
      totalRent,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API: List of books issued to a person by user ID or email
router.get("/user/:userIdentifier", async (req, res) => {
  const { userIdentifier } = req.params;

  try {
    let user;
    if (userIdentifier.includes('@')) {
      user = await User.findOne({ email: userIdentifier });
    } else {
      user = await User.findById(userIdentifier);
    }

    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    const transactions = await Transaction.find({ userId: user._id });

    res.status(200).json({
      user: user.name,
      booksIssued: transactions.map(t => ({
        bookName: t.bookName,
        issueDate: t.issueDate,
        returnDate: t.returnDate || "Not returned",
        status: t.status
      }))
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API: List of books issued in a date range and the person they are issued to
router.get("/daterange/:startDate/:endDate", async (req, res) => {
    const { startDate, endDate } = req.params;
  console.log(startDate, endDate);
  
    try {
      // Ensure startDate and endDate include the whole day
      const start = new Date(startDate);
        const end = new Date(endDate);
        
        // Log the Date objects
        console.log("Parsed Start Date:", start);
        console.log("Parsed End Date:", end);
        
        // Adjust end date to include the whole end day
        end.setHours(23, 59, 59, 999);

        // Find transactions within the date range
        const transactions = await Transaction.find({
            issueDate: { $gte: start, $lte: end }
        });

        console.log("Transactions Found:", transactions);
   
      const result = await Promise.all(transactions.map(async (transaction) => {
        const user = await User.findById(transaction.userId);
        return {
          bookName: transaction.bookName,
          issueDate: transaction.issueDate,
          user: user ? user.name : "User not found",
        };
      }));
  
      res.status(200).json(result);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  
// Helper APIs
router.get("/users", async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

router.get("/books", async (req, res) => {
  try {
    const books = await Book.find();
    res.status(200).json(books);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});




// Issue Transaction
router.post("/issue/:bookName/:userIdentifier/:issueDate", async (req, res) => {
    const { bookName, userIdentifier, issueDate } = req.params;

    try {
        let user;
        if (userIdentifier.includes('@')) {
            user = await User.findOne({ email: userIdentifier });
        } else {
            user = await User.findById(userIdentifier);
        }

        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        const existingTransaction = await Transaction.findOne({ 
            bookName, 
            userId: user._id, 
            status: 'issued' 
        });

        if (existingTransaction) {
            return res.status(400).json({ error: "Book is already issued to this user and not returned yet" });
        }

        const newTransaction = new Transaction({
            bookName,
            userId: user._id,
            issueDate: new Date(issueDate),
            status: 'issued'
        });

        await newTransaction.save();
        res.status(201).json({ message: "Book issued successfully", transaction: newTransaction });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Return Transaction
router.post("/return/:bookName/:userIdentifier/:returnDate", async (req, res) => {
    const { bookName, userIdentifier, returnDate } = req.params;

    try {
        let user;
        if (userIdentifier.includes('@')) {
            user = await User.findOne({ email: userIdentifier });
        } else {
            user = await User.findById(userIdentifier);
        }

        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        const transaction = await Transaction.findOne({ bookName, userId: user._id, status: 'issued' });
        if (!transaction) {
            return res.status(404).json({ error: "No active transaction found for this book and user" });
        }

        const issueDate = new Date(transaction.issueDate);
        const returnDateObj = new Date(returnDate);
        const daysRented = Math.ceil((returnDateObj - issueDate) / (1000 * 60 * 60 * 24));
        const book = await Book.findOne({ bookName });
        const rent = daysRented * book.rentPerDay;

        transaction.returnDate = returnDateObj;
        transaction.rent = rent;
        transaction.status = 'returned';

        await transaction.save();
        res.status(200).json({ message: "Book returned successfully", rent, transaction });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});


module.exports = router;
